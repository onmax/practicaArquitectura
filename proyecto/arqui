* Inicializa el SP y el PC
**************************
        ORG     $0
        DC.L    $8000           * Pila
        DC.L    INICIO          * PC

        ORG     $400
        *Declaracion de buffers
        TAM_B:  EQU     2001

        bra:    DS.B    TAM_B     *400
        brb:    DS.B    TAM_B     *bd1
        bta:    DS.B    TAM_B     *13a2
        btb:    DS.B    TAM_B     *1b73
        bscan:  DS.B    2000      *2344
        bprint: DS.B    2000      *272c


        *Punteros


            bra_escritura:          DS.B  4     
            bra_lectura:            DS.B  4
            bra_fin:                DS.B  4       *bd0


            brb_escritura:          DS.B  4
            brb_lectura:            DS.B  4
            brb_fin:                DS.B  4       *13a1



            bta_escritura:          DS.B  4
            bta_lectura:            DS.B  4
            bta_fin:                DS.B  4       *1b72



            btb_escritura:          DS.B  4
            btb_lectura:            DS.B  4
            btb_fin:                DS.B  4       *2343




* Definicion de equivalencias
***************************************
*********************************

***Para A - Tabla pg.27***
MR1A    EQU     $effc01       * de modo A (escritura)
MR2A    EQU     $effc01       * de modo A (segunda escritura)
SRA     EQU     $effc03       * de estado A (lectura)
CSRA    EQU     $effc03       * de seleccion de reloj A (escritura)
CRA     EQU     $effc05       * de control A (escritura)
TBA     EQU     $effc07       * buffer transmision A (escritura)
RBA     EQU     $effc07       * buffer recepcion A  (lectura)

***Para B - Tabla pg.27***
MR1B    EQU     $effc11       * de modo B (escritura)
MR2B    EQU     $effc11       * de modo B (segunda escritura)
SRB     EQU     $effc13       * de estado B (lectura)
CSRB    EQU     $effc13       * de seleccion de reloj B (escritura)
CRB     EQU     $effc15       * de control B (escritura)
RBB     EQU     $effc17       * buffer recepcion B  (lectura)
TBB     EQU     $effc17       * buffer transmision B (escritura)

*ambas. Ver tabla pg.37
ACR     EQU     $effc09       * de control auxiliar
IMR     EQU     $effc0B       * de mascara de interrupcion A (escritura)
ISR     EQU     $effc0B       * de estado de interrupcion A (lectura)
IVR     EQU     $effc19       * de control auxiliar





**************************** INIT *************************************************************
INIT:
        MOVE.B          #%00010000,CRA      * Reinicia el puntero MR1
        MOVE.B          #%00000011,MR1A     * 8 bits por caracter y solicita interrupcion
        MOVE.B          #%00000011,MR1B     * 8 bits por caracter y solicita interrupcion
        MOVE.B          #%00000000,MR2A     * Eco desactivado.
        MOVE.B          #%00000000,MR2B     * Eco desactivado.
        MOVE.B          #%11001100,CSRA     * Velocidad = 38400 bps.
        MOVE.B          #%11001100,CSRB     * Velocidad = 38400 bps.
        MOVE.B          #%00000000,ACR      * Velocidad = 38400 bps.
        MOVE.B          #%00000101,CRA      * Transmision y recepcion activados. Full Duplex.
        MOVE.B          #%00000101,CRB      * Transmision y recepcion activados. Full Duplex.
        MOVE.B          #%00000000,ISR      * Activar mascara de interrupcion (lectura)
        MOVE.B          #%01000000,IVR      * Vector de interrupcion en 64 (decimal), 40(hexadecimal).
                                            * RTI habra que colocarlo en => 64 x 4 = 256 (decimal) = 100(hexadecimal)
        **NOTA: Creemos que hay que ir cambiando ISR y IMR

        MOVE.L  #TAM_B,D0
        SUB.L   #1,D0

        *INICIALIZACION DE PUNTEROS

        MOVE.L  #bra,bra_escritura
        MOVE.L  #bra,bra_lectura
        MOVE.L  #bra,A0
        MOVE.L  A0,D1
        ADD.L   D0,D1               *Posicion efectiva del final en D1
        MOVE.L  D1,bra_fin


        MOVE.L  #brb,brb_escritura
        MOVE.L  #brb,brb_lectura
        MOVE.L  #brb,A0
        MOVE.L  A0,D1
        ADD.L   D0,D1                   *Posicion efectiva del final en D1
        MOVE.L  D1,brb_fin


        MOVE.L  #bta,bta_escritura      *bta_escritura apunta donde apunta bta
        MOVE.L  #bta,bta_lectura
        MOVE.L  #bta,A0
        MOVE.L  A0,D1
        ADD.L   D0,D1                   *Posicion efectiva del final en D1
        MOVE.L  D1,bta_fin


        MOVE.L  #btb,btb_escritura
        MOVE.L  #btb,btb_lectura
        MOVE.L  #btb,A0
        MOVE.L  A0,D1
        ADD.L   D0,D1                   *Posicion efectiva del final en D1
        MOVE.L  D1,btb_fin


        MOVE.L  #bscan,bscan_inicio
        MOVE.L  #bscan,bscan_escritura


        RTS
**************************** FIN INIT *********************************************************




**************************** RTI ************************************************************

**************************** FIN RTI ********************************************************





**************************** PRINT ************************************************************
PRINT:    LINK      A6,#12              *Creación del marco de pila (en este caso para albergar 1 variable local)
          MOVE.L    #0,D1
          MOVE.L    #0,D2
          MOVE.W    $e(A6),D1           *Pasar el valor del parámetro Tamaño al registro deseado (en este caso D1)
          MOVE.W    $c(A6),D2           *Pasar el valor del parámetro Descriptor al registro deseado (en este caso D2)          
          MOVE.L    #1,D4
          CMP.L     D4,D2               *Comprobación de si los parámetros son correctos
          BGT       P_INCORRECTO
          MOVE.L    $8(A6),D3
          MOVE.L    #0,-4(A6)           *Contador de caracteres aceptados -> marco de pila
          MOVE.L    D3,-8(A6)           *puntero al buffer -> marco de pila
          MOVE.L    D1,-12(A6)          *parametro tamaño como contador
          CMP       #1,D2               *Si Descriptor = 1
          BEQ       PR_LIN_B            *Saltamos a la línea B

BUC_P1    MOVE.L    #2,D0
          MOVE.L    -8(A6),A1
          MOVE.B    (A1),D1
          BSR       ESCCAR
          CMP.L     #0,D0
          BNE       FIN                 *Si el buffer está lleno, saltamos al final
          ADD.L     #1,-4(A6)           *+1 caracteres insertados
          ADD.L     #1,-8(A6)           *Avanzamos el puntero del buffer
          SUB.L     #1,-12(A6)          *-1 al tamaño
          CMP.L     #0,-12(A6)
          BNE       BUC_P1
          BRA       FIN

PR_LIN_B: MOVE.L    #3,D0
          MOVE.L    -8(A6),A1
          MOVE.B    (A1),D1
          BSR       ESCCAR
          CMP.L     #0,D0
          BNE       FIN                 *Si el buffer está lleno, saltamos al final
          ADD.L     #1,-4(A6)           *+1 caracteres insertados
          ADD.L     #1,-8(A6)           *Avanzamos el puntero del buffer
          SUB.L     #1,-12(A6)          *-1 al tamaño
          CMP.L     #0,-12(A6)
          BNE       PR_LIN_B
FIN:      MOVE.L    -4(A6),D0
          UNLK      A6
          RTS

**************************** FIN PRINT ********************************************************



P_INCORRECTO:   MOVE.L   #$ffffffff,D0
                UNLK     A6      
                RTS

ERROR:          MOVE.L   #0,D0
                UNLK     A6
                RTS

**************************** SCAN ************************************************************
SCAN:     LINK      A6,#-12             *Creación del marco de pila (en este caso para albergar 3 variables locales)
          MOVE.L    #0,D1
          MOVE.L    #0,D2
          MOVE.W    $e(A6),D1           *Pasar el valor del parámetro Tamaño al registro deseado (en este caso D1)
          MOVE.W    $c(A6),D2           *Pasar el valor del parámetro Descriptor al registro deseado (en este caso D2)          
          MOVE.L    #1,D4
          CMP.L     D4,D2               *Comprobación de si los parámetros son correctos
          BGT       P_INCORRECTO
          MOVE.L    #2000,D5    
          CMP.L     D5,D1
          BGT       P_INCORRECTO
          CMP       #1,D2               *Si Descriptor = 1
          BEQ       SC_LIN_B            *Saltamos a la línea B
          MOVE.L    #0,D0
          BSR       LINEA
          CMP.L     #0,D0
          BEQ       ERROR
          MOVE.W    $e(A6),D1           *Pasar el valor del parámetro Tamaño al registro deseado (en este caso D1)
          CMP.L     D0,D1
          BGT       ERROR
          MOVE.L    $8(A6),D3           *Pasar el valor del parámetro Buffer al registro deseado (en este caso D3)
          MOVE.L    D0,-4(A6)           *Guardamos en el marco de pila la longitud de la línea, que usaremos de contador
          MOVE.L    D0,-8(A6)           *Guardamos en el marco de pila la longitud de la línea (sin alterarlo para devolverlo)
          MOVE.L    D3,-12(A6)          *Guardamos el que será el puntero de escritura de SCAN (el parámetro Buffer al principio)
LECT_1:   MOVE.L    #0,D0
          BSR       LEECAR              *Llamamos a LEECAR con parametro 0 (bra)
          MOVE.L    -12(A6),D1          *Introducimos en D1 el puntero actual de escritura de SCAN
          MOVE.L    D1,A0               *Llevamos la posición de memoria a A0
          MOVE.B    D0,(A0)             *Introducimos el carácter leido en la posicion de A0
          ADD.L     #1,A0               *Avanzamos el puntero
          MOVE.L    A0,D1               *Posicion del puntero -> D1
          MOVE.L    D1,-12(A6)          *Actualización del puntero
          SUB.L     #1,-4(A6)           *Restamos una iteración al contador
          CMP.L     #0,-4(A6)           *Comprobamos si hemos llegado al final
          BNE       LECT_1              *Si no es el final volvemos al bucle
          MOVE.L    -8(A6),D0           *Devolvemos en D0 el numero de caracteres leídos

SC_LIN_B: MOVE.L    #1,D0
          BSR       LINEA
          CMP.L     #0,D0
          BEQ       ERROR
          MOVE.W    $e(A6),D1           *Pasar el valor del parámetro Tamaño al registro deseado (en este caso D1)
          CMP.L     D0,D1
          BGT       ERROR
          MOVE.L    $8(A6),D3           *Pasar el valor del parámetro Buffer al registro deseado (en este caso D3)
          MOVE.L    D0,-4(A6)           *Guardamos en el marco de pila la longitud de la línea, que usaremos de contador
          MOVE.L    D0,-8(A6)           *Guardamos en el marco de pila la longitud de la línea (sin alterarlo para devolverlo)
          MOVE.L    D3,-12(A6)          *Guardamos el que será el puntero de escritura de SCAN (el parámetro Buffer al principio)
LECT_2:   MOVE.L    #0,D0
          BSR       LEECAR              *Llamamos a LEECAR con parametro 0 (bra)
          MOVE.L    -12(A6),D1          *Introducimos en D1 el puntero actual de escritura de SCAN
          MOVE.L    D1,A0               *Llevamos la posición de memoria a A0
          MOVE.B    D0,(A0)             *Introducimos el carácter leido en la posicion de A0
          ADD.L     #1,A0               *Avanzamos el puntero
          MOVE.L    A0,D1               *Posicion del puntero -> D1
          MOVE.L    D1,-12(A6)          *Actualización del puntero
          SUB.L     #1,-4(A6)           *Restamos una iteración al contador
          CMP.L     #0,-4(A6)           *Comprobamos si hemos llegado al final
          BNE       LECT_2              *Si no es el final volvemos al bucle
          MOVE.L    -8(A6),D0           *Devolvemos en D0 el numero de caracteres leídos         

          UNLK      A6                  *Destrucción del marco de pila
          RTS
**************************** FIN SCAN ********************************************************


VACIO:    MOVE.L      #$ffffffff,D0
          RTS


**************************** LEECAR ************************************************************
LEECAR:   MOVE.L      D0,D2           *Buffer a D2
          BTST        #0,D2           *Si el bit 0 == 0 --> Ir a linea A
          BEQ         LC_LIN_A        *EOC --> Ir a B

          BTST        #1,D2           *Si el bit 1 == 0 --> Ir a recepcion
          BEQ         LC_BRB          *EOC --> Ir a transmision

            ******Buffer transmision B**************
                        MOVE.L      btb_lectura,A0     *Puntero de lectura -> A0
                        MOVE.L      A0,D4
                        MOVE.L      btb_escritura,A1   *Puntero de escritura -> A1
                        MOVE.L      A1,D5
                        CMP.L       D4,D5              *Comparamos si lectura y escritura apuntan al mismo sitio (vacio)
                        BEQ         VACIO

                        MOVE.B      (A0),D0            *Leemos el dato
                        MOVE.L      btb_fin,A2         *Puntero de fin -> A2
                        MOVE.L      A2,D6
                        CMP.L       D6,D4              *Comparamos si el puntero de lectura esta en el final
                        BEQ         LBTB_BF

                        ADD.L       #1,D4               *Puntero de lectura + 1
                        MOVE.L      D4,A0               *Nueva posicion del puntero de lectura -> A0
                        MOVE.L      A0,btb_lectura      *Actualizamos el puntero
                        RTS

            LBTB_BF:    MOVE.L      #btb,btb_lectura    *Nueva posicion del puntero de lectura -> A0 (inicio)
                        RTS

LC_LIN_A:   BTST        #1,D2            *Se repite el mismo esquema que LIN_B
            BEQ         LC_BRA

            ******Buffer transmision A**************
            LC_BTA:     MOVE.L      bta_lectura,A0
                        MOVE.L      A0,D4
                        MOVE.L      bta_escritura,A1
                        MOVE.L      A1,D5
                        CMP.L       D4,D5
                        BEQ         VACIO

                        MOVE.B      (A0),D0
                        MOVE.L      bta_fin,A2
                        MOVE.L      A2,D6
                        CMP.L       D6,D4
                        BEQ         LBTA_BF

                        ADD.L       #1,D4
                        MOVE.L      D4,A0
                        MOVE.L      A0,bta_lectura
                        RTS
            LBTA_BF:    MOVE.L      #bta,bta_lectura
                        RTS


*******Buffer recepcion A***************
LC_BRA:   MOVE.L      bra_lectura,A0
          MOVE.L      A0,D4
          MOVE.L      bra_escritura,A1
          MOVE.L      A1,D5
          CMP.L       D4,D5
          BEQ         VACIO

          MOVE.B      (A0),D0
          MOVE.L      bra_fin,A2
          MOVE.L      A2,D6
          CMP.L       D6,D4
          BEQ         LBRA_BF

          ADD.L       #1,D4
          MOVE.L      D4,A0
          MOVE.L      A0,bra_lectura
          RTS
LBRA_BF:  MOVE.L      #bra,bra_lectura
          RTS


*******Buffer recepcion B***************
LC_BRB:   MOVE.L      brb_lectura,A0
          MOVE.L      A0,D4
          MOVE.L      brb_escritura,A1
          MOVE.L      A1,D5
          CMP.L       D4,D5
          BEQ         VACIO

          MOVE.B      (A0),D0
          MOVE.L      brb_fin,A2
          MOVE.L      A2,D6
          CMP.L       D6,D4
          BEQ         LBRB_BF

          ADD.L       #1,D4
          MOVE.L      D4,A0
          MOVE.L      A0,brb_lectura
          RTS
LBRB_BF:  MOVE.L      #brb,brb_lectura
          RTS



**************************** FIN LEECAR ********************************************************


LLENO:      MOVE.L      #$ffffffff,D0
            RTS


**************************** ESCCAR ************************************************************
ESCCAR:     MOVE.L      D0,D2           *Buffer a D2
            MOVE.L      #0,D3           *D3 a cero
            MOVE.B      D1,D3           *Caracter a D3
            BTST        #0,D2           *Si el bit 0 == 0 --> Ir a linea A
            BEQ         E_LIN_A         *EOC --> Ir a B

            BTST        #1,D2           *Si el bit 1 == 0 --> Ir a recepcion
            BEQ         EC_BRB          *EOC --> Ir a transmision

    ******Buffer transmision B**************
            MOVE.L      btb_escritura,A0
            MOVE.L      A0,D2
            MOVE.L      btb_lectura,A1
            MOVE.L      A1,D5
            MOVE.L      btb_fin,A2
            MOVE.L      A2,D6
            MOVE.B      D3,(A0)
            CMP.L       D2,D6
            BEQ         BTB_FB

            MOVE.L      A0,D7
            ADD.L       #1,D7
            CMP.L       D7,D5
            BEQ         LLENO

            MOVE.L      D7,A0
            MOVE.L      A0,btb_escritura
            MOVE.L      #0,D0
            RTS

BTB_FB:     MOVE.L      #btb,A3
            MOVE.L      A3,D7
            CMP.L       D5,D7
            BEQ         LLENO
            MOVE.L      D7,D2
            MOVE.L      D2,A0
            MOVE.L      A0,btb_escritura
            MOVE.L      #0,D0
            RTS



E_LIN_A:    BTST        #1,D2            *Se repite el mismo esquema que LIN_B
            BEQ         EC_BRA

    ******Buffer transmision A**************
            MOVE.L      bta_escritura,A0    *Puntero de escritura -> A0
            MOVE.L      A0,D2
            MOVE.L      bta_lectura,A1      *Puntero de lectura -> A1
            MOVE.L      A1,D5
            MOVE.L      bta_fin,A2          *Puntero de fin -> A2
            MOVE.L      A2,D6
            MOVE.B      D3,(A0)             *Se escribe el caracter en el buffer
            CMP.L       D2,D6               *¿Escritura = FIN?
            BEQ         BTA_BF

            MOVE.L      A0,D7               *Puntero de escritura -> D7
            ADD.L       #1,D7               *Puntero de escritura + 1
            CMP.L       D7,D5               *Comprobamos si Escritura + 1 = Lectura
            BEQ         LLENO

            MOVE.L      D7,A0               *Nueva posicion del puntero de escritura -> A0
            MOVE.L      A0,bta_escritura    *Actualizamos el puntero
            MOVE.L      #0,D0               *Se devuelve 0 en D0 al haber escrito el caracter correctamente
            RTS

BTA_BF:     MOVE.L      #bta,A3             *Cargamos en A3 el puntero de inicio del buffer
            MOVE.L      A3,D7               *A3 -> D3
            CMP.L       D5,D7               *Comprobamos que puntero de inicio != puntero de lectura
            BEQ         LLENO
            MOVE.L      D7,D2               *No esta lleno, por lo que se puede escribir en el buffer
            MOVE.L      D2,A0               *D4 -> A0
            MOVE.L      A0,bta_escritura    *Actualizamos el puntero de escritura
            MOVE.L      #0,D0               *Se devuelve 0 en D0 al haber escrito el caracter correctamente
            RTS

*******Buffer recepcion A***************
EC_BRA:     MOVE.L      bra_escritura,A0
            MOVE.L      A0,D2
            MOVE.L      bra_lectura,A1
            MOVE.L      A1,D5
            MOVE.L      bra_fin,A2
            MOVE.L      A2,D6
            MOVE.B      D3,(A0)
            CMP.L       D2,D6
            BEQ         BRA_FB

            MOVE.L      A0,D7
            ADD.L       #1,D7
            CMP.L       D7,D5
            BEQ         LLENO

            MOVE.L      D7,A0
            MOVE.L      A0,bra_escritura
            MOVE.L      #0,D0
            RTS

BRA_FB:     MOVE.L      #bra,A3
            MOVE.L      A3,D7
            CMP.L       D5,D7
            BEQ         LLENO
            MOVE.L      D7,D2
            MOVE.L      D2,A0
            MOVE.L      A0,bra_escritura
            MOVE.L      #0,D0
            RTS



*******Buffer recepcion B***************
EC_BRB:     MOVE.L      brb_escritura,A0
            MOVE.L      A0,D2
            MOVE.L      brb_lectura,A1
            MOVE.L      A1,D5
            MOVE.L      brb_fin,A2
            MOVE.L      A2,D6
            MOVE.B      D3,(A0)
            CMP.L       D2,D6
            BEQ         BRB_FB

            MOVE.L      A0,D7
            ADD.L       #1,D7
            CMP.L       D7,D5
            BEQ         LLENO

            MOVE.L      D7,A0
            MOVE.L      A0,brb_escritura
            MOVE.L      #0,D0
            RTS

BRB_FB:     MOVE.L      #brb,A3
            MOVE.L      A3,D7
            CMP.L       D5,D7
            BEQ         LLENO
            MOVE.L      D7,D2
            MOVE.L      D2,A0
            MOVE.L      A0,brb_escritura
            MOVE.L      #0,D0
            RTS


**************************** FIN ESCCAR ********************************************************


NOLINEA:      MOVE.L       #0,D0
              RTS


**************************** LINEA ************************************************************
  LINEA:      MOVE.L      D0,D2           *Buffer a D2
              BTST        #0,D2           *Si el bit 0 == 0 --> Ir a linea A
              BEQ         LI_LIN_A         *EOC --> Ir a B

              BTST        #1,D2           *Si el bit 1 == 0 --> Ir a recepcion
              BEQ         LI_BRB          *EOC --> Ir a transmision


      ******Buffer transmision B**************

              MOVE.L      btb_lectura,A0              *Puntero de lectura -> A0
              MOVE.L      A0,D4                       *Direccion a la que apunta el puntero -> D4
              MOVE.L      btb_escritura,A1            *Puntero de escritura -> A1
              MOVE.L      A1,D5                       *Direccion a la que apunta el puntero -> D5
              MOVE.L      btb_fin,A2                  *Puntero de fin -> A2
              MOVE.L      A2,D6                       *El puntero del fin apunta a D6
              MOVE.L      #13,D7                      *13 -> D7 (El retorno de carro)
              MOVE.L      #0,D0                       *Limpiamos el registro D0 (CONTADOR)
              MOVE.L      #0,D1                       *Limpiamos el registro D1 (GUARDAMOS EL DATO DE LECTURA)


  BTB_LOOP:   CMP.L       D4,D5                       *Comprobamos si lectura = escritura
              BEQ         NOLINEA                   *El puntero de escritura (la copia) ha llegado al mismo sitio que el puntero de escritura. No hay mas elementos que contar

              MOVE.L      D4,A0                       *Llevamos el D4 al A0
              MOVE.B      (A0),D1                     *Leemos el dato
              ADD.L       #1,D0                       *A?adimos uno al contador

              CMP.L       D1,D7                       *Si el dato leido es 13, vamos al final de la subrutina
              BEQ         F_BTB_LIN

              CMP.L       D6,D4                       *Si el puntero de lectura ha llegado al final vamos a inicio del buffer
              BEQ         INICIO_BTB

              ADD.L       #1,D4                       *Aumentamos el puntero al siguiente elemento
              BRA         BTB_LOOP

  INICIO_BTB: MOVE.L      #btb,A0
              MOVE.L      A0,D4                       *Guardamos el puntero de inicio en D2
              BRA         BTB_LOOP

  F_BTB_LIN: RTS                                      *Se termina la rutina




  LI_LIN_A:   BTST        #1,D2            *Se repite el mismo esquema que LIN_B
              BEQ         LI_BRA

              ******Buffer transmision A**************
                  MOVE.L      bta_lectura,A0
                  MOVE.L      A0,D4
                  MOVE.L      bta_escritura,A1
                  MOVE.L      A1,D5
                  MOVE.L      bta_fin,A2
                  MOVE.L      A2,D6
                  MOVE.L      #13,D7
                  MOVE.L      #0,D0
                  MOVE.L      #0,D1


      BTA_LOOP:   CMP.L       D4,D5
                  BEQ         NOLINEA

                  MOVE.L      D4,A0
                  MOVE.B      (A0),D1
                  ADD.L       #1,D0

                  CMP.L       D1,D7
                  BEQ         FBTALIN

                  CMP.L       D6,D4
                  BEQ         INI_BTA

                  ADD.L       #1,D4
                  BRA         BTA_LOOP

      INI_BTA: MOVE.L      #bta,A0
                  MOVE.L      A0,D4
                  BRA         BTA_LOOP

      FBTALIN: RTS

      ******Buffer recepcion B**************

        LI_BRB:   MOVE.L      brb_lectura,A0
                  MOVE.L      A0,D4
                  MOVE.L      brb_escritura,A1
                  MOVE.L      A1,D5
                  MOVE.L      brb_fin,A2
                  MOVE.L      A2,D6
                  MOVE.L      #13,D7
                  MOVE.L      #0,D0
                  MOVE.L      #0,D1


        BRB_LOOP: CMP.L       D4,D5
                  BEQ         NOLINEA

                  MOVE.L      D4,A0
                  MOVE.B      (A0),D1
                  ADD.L       #1,D0

                  CMP.L       D1,D7
                  BEQ         FBRBLIN

                  CMP.L       D6,D4
                  BEQ         INI_BRB

                  ADD.L       #1,D4
                  BRA         BRB_LOOP

      INI_BRB:    MOVE.L      #brb,A0
                  MOVE.L      A0,D4
                  BRA         BTA_LOOP

        FBRBLIN: RTS

        ******Buffer recepcion A**************

          LI_BRA:   MOVE.L      bra_lectura,A0
                    MOVE.L      A0,D4
                    MOVE.L      bra_escritura,A1
                    MOVE.L      A1,D5
                    MOVE.L      bra_fin,A2
                    MOVE.L      A2,D6
                    MOVE.L      #13,D7
                    MOVE.L      #0,D0
                    MOVE.L      #0,D1


          BRA_LOOP: CMP.L       D4,D5
                    BEQ         NOLINEA

                    MOVE.L      D4,A0
                    MOVE.B      (A0),D1
                    ADD.L       #1,D0

                    CMP.L       D1,D7
                    BEQ         FBRALIN

                    CMP.L       D6,D4
                    BEQ         INI_BRA

                    ADD.L       #1,D4
                    BRA         BRA_LOOP

        INI_BRA:    MOVE.L      #bra,A0
                    MOVE.L      A0,D4
                    BRA         BRB_LOOP

        FBRALIN: RTS



**************************** FIN LINEA ********************************************************




**************************** PROGRAMA PRINCIPAL **********************************************
INICIO:     BSR  INIT                 * Inicia el controlador
            
            

            


            MOVE.L  #5,D0
            MOVE.L  #0,D1
            MOVE.L  #bprint,D2
            SUB.W   #2,A7
            MOVE.W  D0,(A7)
            SUB.W   #2,A7
            MOVE.W  D1,(A7)
            MOVE.L  D2,-(A7)
            BSR PRINT
            MOVE.L  (A7),D2
            ADD.L   #2,A7
            MOVE.W  (A7),D1
            ADD.L   #2,A7
            MOVE.W  (A7),D0

          


            BREAK
**************************** FIN PROGRAMA PRINCIPAL ******************************************
