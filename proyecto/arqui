* Inicializa el SP y el PC
**************************
        ORG     $0
        DC.L    $8000           * Pila
        DC.L    INICIO          * PC

        ORG     $400
        *Declaraci?n de buffers
        TAM_B:  EQU     5
        bra:    DS.B    TAM_B
        brb:    DS.B    TAM_B
        bta:    DS.B    TAM_B
        btb:    DS.B    TAM_B

        *Punteros de A

            *Recepci?n
            bra_escritura:          DS.B  4
            bra_lectura:            DS.B  4
            bra_fin:                DS.B  4


            *Transmisi?n
            bta_escritura:          DS.B  4
            bta_lectura:            DS.B  4
            bta_fin:                DS.B  4

        *Punteros de B

            *Recepci?n
            brb_escritura:          DS.B  4
            brb_lectura:            DS.B  4
            brb_fin:                DS.B  4


            *Transmisi?n
            btb_escritura:          DS.B  4
            btb_lectura:            DS.B  4
            btb_fin:                DS.B  4


* Definici?n de equivalencias
***************************************
*********************************

***Para A - Tabla pg.27***
MR1A    EQU     $effc01       * de modo A (escritura)
MR2A    EQU     $effc01       * de modo A (2? escritura)
SRA     EQU     $effc03       * de estado A (lectura)
CSRA    EQU     $effc03       * de seleccion de reloj A (escritura)
CRA     EQU     $effc05       * de control A (escritura)
TBA     EQU     $effc07       * buffer transmision A (escritura)
RBA     EQU     $effc07       * buffer recepcion A  (lectura)

***Para B - Tabla pg.27***
MR1B    EQU     $effc11       * de modo B (escritura)
MR2B    EQU     $effc11       * de modo B (2? escritura)
SRB     EQU     $effc13       * de estado B (lectura)
CSRB    EQU     $effc13       * de seleccion de reloj B (escritura)
CRB     EQU     $effc15       * de control B (escritura)
RBB     EQU     $effc17       * buffer recepcion B  (lectura)
TBB     EQU     $effc17       * buffer transmision B (escritura)

*ambas. Ver tabla pg.37
ACR     EQU     $effc09       * de control auxiliar
IMR     EQU     $effc0B       * de mascara de interrupcion A (escritura)
ISR     EQU     $effc0B       * de estado de interrupcion A (lectura)
IVR     EQU     $effc19       * de control auxiliar





**************************** INIT *************************************************************
INIT:
        *MOVE.B          #%00010000,CRA      * Reinicia el puntero MR1
        *MOVE.B          #%00000011,MR1A     * 8 bits por caracter y solicita interrupcion
        *MOVE.B          #%00000011,MR1B     * 8 bits por caracter y solicita interrupcion
        *MOVE.B          #%00000000,MR2A     * Eco desactivado.
        *MOVE.B          #%00000000,MR2B     * Eco desactivado.
        *MOVE.B          #%11001100,CSRA     * Velocidad = 38400 bps.
        *MOVE.B          #%11001100,CSRB     * Velocidad = 38400 bps.
        *MOVE.B          #%00000000,ACR      * Velocidad = 38400 bps.
        *MOVE.B          #%00000101,CRA      * Transmision y recepcion activados. Full Duplex.
        *MOVE.B          #%00000101,CRB      * Transmision y recepcion activados. Full Duplex.
        *MOVE.B          #%00000000,ISR      * Activar m?scara de interrupcion (lectura)
        *MOVE.B          #%01000000,IVR      * Vector de interrupcion en 64 (decimal), 40(hexadecimal).
                                            * RTI habr?a que colocarlo en => 64 x 4 = 256 (decimal) = 100(hexadecimal)
        **NOTA: Creemos que hay que ir cambiando ISR y IMR
        
        MOVE.L  #TAM_B,D0
        SUB.L   #1,D0
        *INICIALIZACI?N DE PUNTEROS

        MOVE.L  #bra,bra_escritura
        MOVE.L  #bra,bra_lectura
        MOVE.L  #bra,A0
        MOVE.L  A0,D1
        ADD.L   D0,D1               *Posicion efectiva del final en D1
        MOVE.L  D1,bra_fin

        
    
        MOVE.L  #brb,brb_escritura
        MOVE.L  #brb,brb_lectura
        MOVE.L  #brb,A0
        MOVE.L  A0,D1
        ADD.L   D0,D1                   *Posicion efectiva del final en D1
        MOVE.L  D1,brb_fin

        MOVE.L  #bta,bta_escritura      *bta_escritura apunta donde apunta bta
        MOVE.L  #bta,bta_lectura
        MOVE.L  #bta,A0
        MOVE.L  A0,D1
        ADD.L   D0,D1                   *Posicion efectiva del final en D1
        MOVE.L  D1,bta_fin
        

        MOVE.L  #btb,btb_escritura
        MOVE.L  #btb,btb_lectura
        MOVE.L  #btb,A0
        MOVE.L  A0,D1
        ADD.L   D0,D1                   *Posicion efectiva del final en D1
        MOVE.L  D1,btb_fin


        RTS
**************************** FIN INIT *********************************************************




**************************** RTI ************************************************************

**************************** FIN RTI ********************************************************




**************************** PRINT ************************************************************
PRINT:  RTS

**************************** FIN PRINT ********************************************************






**************************** SCAN ************************************************************
SCAN:     RTS
**************************** FIN SCAN ********************************************************




**************************** LEERCAR ************************************************************
LEERCAR:    MOVE.L      #0,A0              *Inicializamos a 0 --> A0
            MOVE.L      #0,A1              *Inicializamos a 0 --> A1
            MOVE.L      D0,D1               *Obtenemos de pila el buffer
            BTST        #0,D1              *Si el bit 0 == 0 --> Ir a linea A
            BEQ         L_LIN_A               *EOC --> Ir a B

            BTST        #1,D1              *Si el bit 1 == 0 --> Ir a recepcion
            BEQ         LC_BRB              *EOC --> Ir a transmision
            BSR         LC_BTB

L_LIN_A:    BTST        #1,D1              *Se repite el mismo esquema que LIN_B
            BEQ         LC_BRA
            BSR         LC_BTA



******Buffer transmision A******

LC_BTA:
            RTS

*******Buffer recepcion A*******
LC_BRA:
            RTS
********************************


******Buffer transmision B******
LC_BTB:
            RTS

*******Buffer recepcion B*******
LC_BRB:
            RTS
********************************


**************************** FIN LEERCAR ********************************************************



**************************** ESCCAR ************************************************************
ESCCAR:     MOVE.L      D0,D2           *Buffer a D2
            MOVE.L      #0,D3           *D3 a cero
            MOVE.B      D1,D3           *Caracter a D3
            MOVE.L      #0,A0           *A0 a cero
            MOVE.L      #0,A1           *A1 a cero
            BTST        #0,D2           *Si el bit 0 == 0 --> Ir a linea A
            BEQ         E_LIN_A            *EOC --> Ir a B

            BTST        #1,D2           *Si el bit 1 == 0 --> Ir a recepcion
            BEQ         EC_BRB           *EOC --> Ir a transmision
            BSR         EC_BTB

E_LIN_A:    BTST        #1,D2            *Se repite el mismo esquema que LIN_B
            BEQ         EC_BRA
            BSR         EC_BTA


******Buffer transmision A******
EC_BTA:     MOVE.L      bta_escritura,A0    *Puntero de escritura -> A0
            MOVE.L      A0,D4
            MOVE.L      bta_lectura,A1      *Puntero de lectura -> A1
            MOVE.L      A1,D5
            MOVE.L      bta_fin,A2          *Puntero de fin -> A2
            MOVE.L      A2,D6
            MOVE.B      D3,(A0)             *Se escribe el caracter en el buffer
            CMP.L       D4,D6               *?Escritura = FIN?
            BEQ         FIN_B

            MOVE.L      A0,D7               *Puntero de escritura -> D7
            ADD.L       #1,D7               *Puntero de escritura + 1
            CMP.L       D7,D5               *Comprobamos si Escritura + 1 = Lectura
            BEQ         LLENO

            MOVE.L      D7,A0               *Nueva posicion del puntero de escritura -> A0
            MOVE.L      A0,bta_escritura    *Actualizamos el puntero
            MOVE.L      #0,D0               *Se devuelve 0 en D0 al haber escrito el caracter correctamente
            RTS

FIN_B:      MOVE.L      #bta,A3             *Cargamos en A3 el puntero de inicio del buffer
            MOVE.L      A3,D7               *A3 -> D3
            CMP.L       D5,D7               *Comprobamos que puntero de inicio != puntero de lectura
            BEQ         LLENO
            MOVE.L      D7,D4               *No esta lleno, por lo que se puede escribir en el buffer
            MOVE.L      D4,A0               *D4 -> A0
            MOVE.L      A0,bta_escritura    *Actualizamos el puntero de escritura
            MOVE.L      #0,D0               *Se devuelve 0 en D0 al haber escrito el caracter correctamente
            RTS

LLENO:      MOVE.L      #$ffffffff,D0
            RTS


*******Buffer recepcion A*******
EC_BRA:     RTS
********************************

******Buffer transmision B******
EC_BTB:     RTS

*******Buffer recepcion B*******
EC_BRB:     RTS
********************************


**************************** FIN ESCCAR ********************************************************





**************************** LINEA ************************************************************
LINEA:  RTS

**************************** FIN LINEA ********************************************************




**************************** PROGRAMA PRINCIPAL **********************************************
INICIO:     BSR             INIT                 * Inicia el controlador
B_PRUEBAS:
            MOVE.L          #2,D0
      	    MOVE.L          #97,D1
            BSR             ESCCAR               * Recibe la linea
            BSR             B_PRUEBAS
            BREAK
**************************** FIN PROGRAMA PRINCIPAL ******************************************
